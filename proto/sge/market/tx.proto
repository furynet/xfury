syntax = "proto3";
package furynetwork.fury.market;

import "gogoproto/gogo.proto";
import "fury/market/market.proto";

option go_package = "github.com/furynet/xfury/x/market/types";

// Msg defines the Msg service.
service Msg {
  // AddMarket defines a method to add the market with the given data.
  rpc AddMarket(MsgAddMarket) returns (MsgAddMarketResponse);
  // ResolveMarket defines a method to resolve the market.
  rpc ResolveMarket(MsgResolveMarket) returns (MsgResolveMarketResponse);
  // UpdateMarket defines a method to update a market.
  rpc UpdateMarket(MsgUpdateMarket) returns (MsgUpdateMarketResponse);
}

// MsgAddMarket is the message type for adding the market into the
// state.
message MsgAddMarket {
  // creator is the address of the creator account of the market.
  string creator = 1;
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgAddMarketResponse response for adding market.
message MsgAddMarketResponse {
  // error contains an error if adding a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market.
  Market data = 2 [ (gogoproto.nullable) = true ];
}

// MsgResolveMarket is the message type for resolving a market.
message MsgResolveMarket {
  // creator is the address of the creator account of the market.
  string creator = 1;
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgResolveMarketResponse response for resolving a market.
message MsgResolveMarketResponse {
  // error contains an error if resolving a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market.
  Market data = 2 [ (gogoproto.nullable) = true ];
}

// MsgUpdateMarket is the message type for updating market data.
// in the state
message MsgUpdateMarket {
  // creator is the address of the creator account of the market.
  string creator = 1;
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgUpdateMarketResponse response for updating a market.
message MsgUpdateMarketResponse {
  // error contains an error if updating a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market
  Market data = 2 [ (gogoproto.nullable) = true ];
}
