// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/house/withdraw.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WithdrawalMode is the enum type for the withdrawal mode.
type WithdrawalMode int32

const (
	// invalid
	WithdrawalMode_WITHDRAWAL_MODE_UNSPECIFIED WithdrawalMode = 0
	// full
	WithdrawalMode_WITHDRAWAL_MODE_FULL WithdrawalMode = 1
	// partial
	WithdrawalMode_WITHDRAWAL_MODE_PARTIAL WithdrawalMode = 2
)

var WithdrawalMode_name = map[int32]string{
	0: "WITHDRAWAL_MODE_UNSPECIFIED",
	1: "WITHDRAWAL_MODE_FULL",
	2: "WITHDRAWAL_MODE_PARTIAL",
}

var WithdrawalMode_value = map[string]int32{
	"WITHDRAWAL_MODE_UNSPECIFIED": 0,
	"WITHDRAWAL_MODE_FULL":        1,
	"WITHDRAWAL_MODE_PARTIAL":     2,
}

func (x WithdrawalMode) String() string {
	return proto.EnumName(WithdrawalMode_name, int32(x))
}

func (WithdrawalMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ca852402ebf549d, []int{0}
}

// Withdrawal represents the withdrawal against a deposit.
type Withdrawal struct {
	// withdrawal is the withdrawal attempt id.
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// address is the bech32-encoded address of the depositor.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// market_uid is the uid of market against which the deposit is
	// being made.
	MarketUID string `protobuf:"bytes,3,opt,name=market_uid,proto3" json:"market_uid"`
	// participation_index is the id corresponding to the book participation
	ParticipationIndex uint64 `protobuf:"varint,4,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty" yaml:"participation_index"`
	// mode is the withdrawal mode enum value
	Mode WithdrawalMode `protobuf:"varint,5,opt,name=mode,proto3,enum=furynetwork.fury.house.WithdrawalMode" json:"mode,omitempty" yaml:"mode"`
	// amount is the amount being withdrawn.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *Withdrawal) Reset()      { *m = Withdrawal{} }
func (*Withdrawal) ProtoMessage() {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca852402ebf549d, []int{0}
}
func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return m.Size()
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("furynetwork.fury.house.WithdrawalMode", WithdrawalMode_name, WithdrawalMode_value)
	proto.RegisterType((*Withdrawal)(nil), "furynetwork.fury.house.Withdrawal")
}

func init() { proto.RegisterFile("fury/house/withdraw.proto", fileDescriptor_9ca852402ebf549d) }

var fileDescriptor_9ca852402ebf549d = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x93, 0x6c, 0xad, 0x74, 0xd4, 0x5a, 0xc6, 0x82, 0x71, 0x0b, 0x99, 0x12, 0x44, 0xaa,
	0xb8, 0x09, 0xe8, 0x6d, 0x3d, 0x48, 0x63, 0xbb, 0x18, 0x68, 0xdd, 0x25, 0x6e, 0x29, 0x78, 0x29,
	0xd9, 0xce, 0x90, 0x0e, 0xdd, 0x64, 0x4a, 0x66, 0x4a, 0x77, 0xbf, 0x81, 0x47, 0x8f, 0x1e, 0x7b,
	0xf1, 0xbb, 0xec, 0x71, 0x8f, 0xe2, 0x61, 0x90, 0xf4, 0x22, 0x1e, 0xf3, 0x09, 0xa4, 0xd3, 0xc8,
	0x76, 0x97, 0x9e, 0xe6, 0xe5, 0x9d, 0xdf, 0xfb, 0xe7, 0x79, 0x78, 0x81, 0xc9, 0x23, 0xe2, 0x4e,
	0xd8, 0x9c, 0x13, 0x77, 0x41, 0xc5, 0x04, 0xa7, 0xe1, 0xc2, 0x99, 0xa5, 0x4c, 0x30, 0x58, 0xe7,
	0x11, 0x49, 0x88, 0x58, 0xb0, 0x74, 0xea, 0xf0, 0x88, 0x38, 0x0a, 0xda, 0xaf, 0x47, 0x2c, 0x62,
	0x0a, 0x70, 0xd7, 0xd1, 0x86, 0xb5, 0x7f, 0xec, 0x01, 0x30, 0x2c, 0xca, 0xc3, 0x73, 0xf8, 0x12,
	0x18, 0x14, 0x9b, 0x7a, 0x53, 0x6f, 0x95, 0xbc, 0x67, 0x99, 0x44, 0x86, 0xdf, 0xf9, 0x2b, 0x91,
	0x41, 0x71, 0x2e, 0x51, 0xe5, 0x32, 0x8c, 0xcf, 0x0f, 0x6d, 0x8a, 0xed, 0xc0, 0xa0, 0x18, 0xbe,
	0x06, 0xf7, 0x43, 0x8c, 0x53, 0xc2, 0xb9, 0x69, 0x34, 0xf5, 0x56, 0xc5, 0x83, 0xb9, 0x44, 0xd5,
	0x0d, 0x53, 0x7c, 0xd8, 0xc1, 0x7f, 0x04, 0xbe, 0x03, 0x20, 0x0e, 0xd3, 0x29, 0x11, 0xa3, 0x39,
	0xc5, 0xe6, 0x9e, 0x2a, 0x68, 0x64, 0x12, 0x55, 0xfa, 0x2a, 0x3b, 0x50, 0x73, 0xb6, 0x90, 0x60,
	0x2b, 0x86, 0xc7, 0xe0, 0xc9, 0x2c, 0x4c, 0x05, 0x1d, 0xd3, 0x59, 0x28, 0x28, 0x4b, 0x46, 0x34,
	0xc1, 0xe4, 0xc2, 0x2c, 0xa9, 0x35, 0xad, 0x5c, 0xa2, 0xfd, 0xcd, 0xd8, 0x1d, 0x90, 0x1d, 0xc0,
	0x5b, 0x59, 0x7f, 0x9d, 0x84, 0x3e, 0x28, 0xc5, 0x0c, 0x13, 0xf3, 0x5e, 0x53, 0x6f, 0x55, 0xdf,
	0x3c, 0x77, 0x76, 0x19, 0xe6, 0xdc, 0xd8, 0xd2, 0x67, 0x98, 0x78, 0x8f, 0x73, 0x89, 0x1e, 0x6c,
	0xe6, 0xac, 0x6b, 0xed, 0x40, 0xb5, 0x80, 0x43, 0x50, 0x0e, 0x63, 0x36, 0x4f, 0x84, 0x59, 0x56,
	0xa2, 0xde, 0x5f, 0x49, 0xa4, 0xfd, 0x92, 0xe8, 0x45, 0x44, 0xc5, 0x64, 0x7e, 0xe6, 0x8c, 0x59,
	0xec, 0x8e, 0x19, 0x8f, 0x19, 0x2f, 0x9e, 0x03, 0x8e, 0xa7, 0xae, 0xb8, 0x9c, 0x11, 0xee, 0xf8,
	0x89, 0xc8, 0x25, 0x7a, 0x54, 0x78, 0xa6, 0xba, 0xd8, 0x41, 0xd1, 0xee, 0xf0, 0xe1, 0xd7, 0x25,
	0xd2, 0xbe, 0x2f, 0x91, 0xf6, 0x67, 0x89, 0xb4, 0x57, 0x13, 0x50, 0xbd, 0xbd, 0x0f, 0x44, 0xa0,
	0x31, 0xf4, 0x4f, 0x3f, 0x76, 0x82, 0xf6, 0xb0, 0xdd, 0x1b, 0xf5, 0x8f, 0x3b, 0xdd, 0xd1, 0xe0,
	0xd3, 0xe7, 0x93, 0xee, 0x07, 0xff, 0xc8, 0xef, 0x76, 0x6a, 0x1a, 0x34, 0x41, 0xfd, 0x2e, 0x70,
	0x34, 0xe8, 0xf5, 0x6a, 0x3a, 0x6c, 0x80, 0xa7, 0x77, 0x7f, 0x4e, 0xda, 0xc1, 0xa9, 0xdf, 0xee,
	0xd5, 0x0c, 0xcf, 0xbb, 0xca, 0x2c, 0xfd, 0x3a, 0xb3, 0xf4, 0xdf, 0x99, 0xa5, 0x7f, 0x5b, 0x59,
	0xda, 0xf5, 0xca, 0xd2, 0x7e, 0xae, 0x2c, 0xed, 0x4b, 0x6b, 0x4b, 0x12, 0x8f, 0xc8, 0x41, 0x61,
	0xd9, 0x3a, 0x76, 0x2f, 0x8a, 0x53, 0x54, 0xc2, 0xce, 0xca, 0xea, 0xb8, 0xde, 0xfe, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x2d, 0xb8, 0x2d, 0x13, 0xa4, 0x02, 0x00, 0x00,
}

func (m *Withdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWithdraw(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Mode != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x28
	}
	if m.ParticipationIndex != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MarketUID) > 0 {
		i -= len(m.MarketUID)
		copy(dAtA[i:], m.MarketUID)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.MarketUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWithdraw(dAtA []byte, offset int, v uint64) int {
	offset -= sovWithdraw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Withdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovWithdraw(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	l = len(m.MarketUID)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovWithdraw(uint64(m.ParticipationIndex))
	}
	if m.Mode != 0 {
		n += 1 + sovWithdraw(uint64(m.Mode))
	}
	l = m.Amount.Size()
	n += 1 + l + sovWithdraw(uint64(l))
	return n
}

func sovWithdraw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWithdraw(x uint64) (n int) {
	return sovWithdraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Withdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= WithdrawalMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWithdraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWithdraw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWithdraw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWithdraw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWithdraw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWithdraw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWithdraw = fmt.Errorf("proto: unexpected end of group")
)
